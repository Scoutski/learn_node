Node 
====

Intro to the REPL shell:
------------------------
- REPL stands for Read, Evaluate, Print, Loop.
- It's a command like interface for node run through the terminal.
- typing 'node' without additional arguments in iTerm opens the node REPL shell.
- the '_' character is reserved in node, it returns the result of the last run operation.
- It is possible to write multiline functions by opening a { at the end of a line and it will allow you to hit return and add more code until the } is added.
- ctrl + C or the words 'break' or 'clear' can be used to cancel the current context to return you to the prompt.
- '.save (filename).js' can save all the operations completed in the current terminal session to the specified filename.
- '.load (filename).js' can be used to load up a file into the current terminal session.
- '.help' will list out all the available REPL commands.

Understanding Callbacks in Node.js:
-----------------------------------
SEE: (callbacks.js & callbacks2.js)
- Callbacks in Node.js are used to perform asynchronous server functions.
- Callbacks allow us to reuse generic functions without having to bloat the code and making it more readable.

Node.js global namespace:
-------------------------
- When a variable is defined inside a node application it is defined within the 'global' variable.
- If you enter 'global' in repl, it lists out all the global variables.
- 'require' is a global object that is responsible for loading different modules.
- 'require' allows us to keep different code inside different modules.
- Once a module is loaded with require, all methods that were written with exports.methodName will exist in the variable that was created with the require.
- e.g.
  in addition.js:
  exports.addNumbers = function(num1, num2) {
    return num1 + num;
  }

  in the node shell or another node file:
  var mikeMaths = require('./src/addition.js');
  mikeMaths.addNumbers(3,6);
  // will return 9;

Node.js process object:
-----------------------
- 
